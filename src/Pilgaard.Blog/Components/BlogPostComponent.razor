@page "/posts/{blogPostSeriesPathName}/{blogPostPathName}"
<article class="blog-post">
    @if (BlogPostSeries is not null)
    {
        <h3>@BlogPostSeries.Title - Part @BlogPost.NumberInSeries</h3>
        <h1>@BlogPost.Title</h1>
        <hr />
        <br />
    }
    @BlogPostText
</article>
<MetadataComponent 
    Title="@Title" 
    Description="@BlogPost.Description" 
    Tags="@Tags" />
<PrismCodeBlockRenderer/>
<GiscusComponent/>
@code {
    [Parameter]
    public string? BlogPostSeriesPathName { get; set; }

    [Parameter]
    public string BlogPostPathName { get; set; } = null!;

    public BlogPost BlogPost { get; set; } = null!;
    public BlogPostSeries? BlogPostSeries { get; set; }

    private string Title => BlogPostSeries?.Title is null ?
        $"{DefaultMetadata.Title} | {BlogPost.Title}" :
        $"{DefaultMetadata.Title} | {BlogPost.Title} | {BlogPostSeries.Title} - Part {BlogPost.NumberInSeries}";

    private string Tags => string.Join(", ", BlogPost.Tags, BlogPostSeries?.Tags);
    private MarkupString BlogPostText { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var path = GetPagePath();
        var text = await File.ReadAllTextAsync(path);
        BlogPostText = text.ToHtml();

        await base.OnInitializedAsync();
    }

    private string GetPagePath()
    {
        BlogPostSeriesPathName ??= "general";
        
        BlogPostSeries = BlogPosts.AllBlogPostSeries.FirstOrDefault(series => series.PathName == BlogPostSeriesPathName);
        
        BlogPost = BlogPostSeries?.BlogPosts.FirstOrDefault(blogPost => blogPost.PathName == BlogPostPathName)!;
        
        var pathPrefix = Path.Join(AppDomain.CurrentDomain.BaseDirectory, "Pages", "posts");

        var path = BlogPostSeriesPathName is null
            ? Path.Join(pathPrefix, BlogPostPathName + ".md")
            : Path.Join(pathPrefix, BlogPostSeriesPathName, BlogPostPathName + ".md");
        return path;

    }

}
