@page "/posts/making-a-blog/4-improving-appearances"
@using Pilgaard.Blog.Extensions
@inherits PrismCodeBlockRenderer

<MudText Typo="Typo.h4" Color="Color.Secondary">Making a blog with C# - Part 4</MudText>
<MudText Typo="Typo.h2">Improving Appearances</MudText>
<MudDivider DividerType="DividerType.FullWidth"></MudDivider>

<MudText Typo="Typo.h4" Color="Color.Secondary" Class="mt-6 mb-2">Razor vs Markdown</MudText>
<MudText>
    After experimenting with MudBlazor I made the decision to use <code>.razor</code> files for blog posts instead of markdown.
    Using markdown is super convenient, but Blazor Components can do so much more.
    <br />
    Plus, by using Blazor Components for blog posts I'll be able to showcase Blazor
    features more easily, should I choose to do so in the future.
    <br />
    So I went ahead and converted my <code>.md</code> files to HTML using
    <MudLink Target="_blank" Href="https://markdowntohtml.com/">this online tool</MudLink>.
    It looked awful at first, and colored code blocks were a complete mess.
    <br />
    Then I changed all <code>p</code> tags to <code>MudText</code>, leveraging the default styling of MudBlazor.
    <br />
    <br />
    In order to un-break code blocks, I figured out I could use string literals
    and then convert them with my old markdown to HTML processor. It had to be string literals, because otherwise
    HTML wouldn't be shown correctly "as code":
    <br />
    <br />
</MudText>
<MudText Typo="Typo.h6">Code</MudText>
@(@"
````csharp
@(@""
```html
<a href=""#item-id-here""></a>
```
"".ToHtml())
````
".ToHtml())
<br />
<MudText Typo="Typo.h6">Output</MudText>
@(@"
```html
<a href=""#item-id-here""></a>
```
".ToHtml())
<MudText Typo="Typo.h4" Color="Color.Secondary" Class="mt-6 mb-2">MudBlazor</MudText>
<MudText>
    I wanted to try out a Blazor Component library to improve my chances of making a nice looking blog.
    <br />
    My first choice was actually <MudLink Href="https://www.syncfusion.com/blazor-components" Target="_blank">SyncFusion</MudLink> - I was curious after watching some of <MudLink Target="_blank" Href="https://www.youtube.com/user/IAmTimCorey">Tim Corey</MudLink>'s videos about it.
    I got a personal license for SyncFusion, and set it up.
    <br />
    Then I started looking at the docs on how to use it, and got flashbacks to my days of styling ASP.NET Core 2.1 MVC with JavaScript 😬
    <br />
    I didn't particularly enjoy those days to be honest, so I had a look at the <MudLink Target="_blank" Href="https://mudblazor.com/docs/overview">MudBlazor docs</MudLink> instead. It looked much more appealing to me.
    <br />
    I added it to my Blazor project by simply following the steps in the <MudLink Target="_blank" Href="https://mudblazor.com/getting-started/installation">MudBlazor Getting Started guide</MudLink>.
</MudText>
<MudText Typo="Typo.h4" Color="Color.Secondary" Class="mt-6 mb-2">Dark Mode</MudText>
<MudText Typo="Typo.body1" Color="Color.Inherit">
    I wanted to either offer a dark mode toggle, or change the color scheme to something darker.
    <br />
    Luckily making and changing between light/dark mode is very simple with MudBlazor, and there's even a <MudLink Target="_blank" Href="https://mudblazor.com/customization/overview#dark-palette">guide</MudLink> for it.
    <br />
    It's possible to change mode depending on the system preference of the user:
</MudText>
@(@"
```csharp
<MudThemeProvider @ref=""@_mudThemeProvider"" @bind-IsDarkMode=""@_isDarkMode"" />
@code {
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }
}
```
".ToHtml())
<MudText Typo="Typo.h4" Color="Color.Secondary" Class="mt-6 mb-2">Social Media Links</MudText>
<MudText Typo="Typo.body1" Color="Color.Inherit">
    As it turns out, making good looking links to Social Media websites is really easy with MudBlazor:
</MudText>
@(@"
```csharp
<MudIconButton Icon=""@Icons.Custom.Brands.LinkedIn"" Color=""Color.Inherit"" Link=""https://www.linkedin.com/in/niels-pilgaard/"" Title=""My LinkedIn Profile"" Target=""_blank"" />
<MudIconButton Icon=""@Icons.Custom.Brands.Twitter"" Color=""Color.Inherit"" Link=""https://twitter.com/NillerMedDild"" Title=""My Twitter Profile"" Target=""_blank"" />
<MudIconButton Icon=""@Icons.Custom.Brands.GitHub"" Color=""Color.Inherit"" Link=""https://github.com/NielsPilgaard"" Title=""My GitHub Profile"" Target=""_blank"" />
```
".ToHtml())

<MudText Typo="Typo.h4" Color="Color.Secondary" Class="mt-6 mb-2">Summary</MudText>
<MudText Typo="Typo.body1" Color="Color.Inherit">
    I've managed to make the website look better, in my opinion.
    <br />
    I think this has been a good first round of UI improvements :D
</MudText>
<GiscusComponent />