@page "/posts/{blogPostSeriesPathName}/{blogPostPathName}"
<article class="blog-post">

    <MudText Typo="Typo.h3" Color="Color.Secondary">
        @BlogPostSeries.Title - Part @BlogPost.NumberInSeries
    </MudText>

    <MudText Typo="Typo.h1" Color="Color.Tertiary">
        @BlogPost.Title
    </MudText>

    <hr class="mb-5"/>

    @BlogPostText

    <BlogPostNavigation CurrentBlogPost="BlogPost" BlogPostSeries="BlogPostSeries"/>

</article>
<MetadataComponent 
    Title="@Title" 
    Description="@BlogPost.Description" 
    Tags="@Tags" />
<PrismCodeBlockRenderer/>
<GiscusComponent/>
@code {
    [Parameter]
    public string? BlogPostSeriesPathName { get; set; }

    [Parameter]
    public string BlogPostPathName { get; set; } = null!;

    public BlogPost BlogPost { get; set; } = null!;
    public BlogPostSeries BlogPostSeries { get; set; } = null!;

    private string Title => $"{DefaultMetadata.Title} | {BlogPost.Title} | {BlogPostSeries.Title} - Part {BlogPost.NumberInSeries}";

    private string Tags => string.Join(", ", BlogPost.Tags, BlogPostSeries.Tags);
    
    private MarkupString BlogPostText { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var path = GetPagePath();
        var text = await File.ReadAllTextAsync(path);
        BlogPostText = text.ToHtml();

        await base.OnInitializedAsync();
    }

    private string GetPagePath()
    {
        BlogPostSeriesPathName ??= "general";
        
        BlogPostSeries = BlogPostData.AllBlogPostSeries.First(series => series.PathName == BlogPostSeriesPathName);
        
        BlogPost = BlogPostSeries.BlogPosts.FirstOrDefault(blogPost => blogPost.PathName == BlogPostPathName)!;

        var pathPrefix = Path.Join(AppDomain.CurrentDomain.BaseDirectory, "Pages", "posts");

        var path = BlogPostSeriesPathName is null
            ? Path.Join(pathPrefix, BlogPostPathName + ".md")
            : Path.Join(pathPrefix, BlogPostSeriesPathName, BlogPostPathName + ".md");
    
        return path;
    }
}
