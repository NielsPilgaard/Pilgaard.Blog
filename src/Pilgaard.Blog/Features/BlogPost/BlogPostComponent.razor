@page "/posts/{blogPostSeriesPathName}/{blogPostPathName}"

<article class="blog-post">

    <MudText Typo="Typo.h3" Color="Color.Secondary">
        @_blogPostSeries.Title - Part @_blogPost.NumberInSeries
    </MudText>

    <MudText Typo="Typo.h1" Color="Color.Tertiary">
        @_blogPost.Title
    </MudText>

    <MudDivider Class="mb-5"/>

    @BlogPostText

    <BlogPostNavigation CurrentBlogPost="_blogPost" BlogPostSeries="_blogPostSeries"/>

</article>
<MetadataComponent Title="@Title"
                   Description="@_blogPost.Description"
                   Tags="@Tags" />
<PrismCodeBlockRenderer/>
<GiscusComponent />
@code {
    [Parameter]
    public string? BlogPostSeriesPathName { get; set; }

    [Parameter]
    public string BlogPostPathName { get; set; } = null!;

    private BlogPost _blogPost = null!;
    private BlogPostSeries _blogPostSeries = null!;

    private string Title => $"{DefaultMetadata.Title} | {_blogPost.Title} | {_blogPostSeries.Title} - Part {_blogPost.NumberInSeries}";

    private string Tags => string.Join(", ", _blogPost.Tags, _blogPostSeries.Tags);

    private MarkupString BlogPostText { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var path = GetPagePath();
        var text = await File.ReadAllTextAsync(path);
        BlogPostText = text.ToHtml();
    }

    private string GetPagePath()
    {
        BlogPostSeriesPathName ??= "general";

        _blogPostSeries = BlogPostData.AllBlogPostSeries.First(series => series.PathName == BlogPostSeriesPathName);

        _blogPost = _blogPostSeries.BlogPosts.FirstOrDefault(blogPost => blogPost.PathName == BlogPostPathName)!;

        var pathPrefix = Path.Join(AppDomain.CurrentDomain.BaseDirectory, "Pages", "posts");

        var path = BlogPostSeriesPathName is null
            ? Path.Join(pathPrefix, BlogPostPathName + ".md")
            : Path.Join(pathPrefix, BlogPostSeriesPathName, BlogPostPathName + ".md");

        return path;
    }
}
